// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply from: "config.gradle"

buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()

    }
}

subprojects {
    afterEvaluate {
        println "======================="
        println "subprojects afterEvaluate"
        println "======================="

        android {
            if (runnableModules.contains(project.name.toString())) {
                resourcePrefix "${project.name}_"
            }

            dataBinding {
                enabled = true;
            }

            defaultConfig {
                kapt {
                    arguments {
                        arg("AROUTER_MODULE_NAME", project.getName())
                    }
                }


                //是可运行的module
                if (runnableModules.contains(project.name.toString())) {
                    //在BuildConfig中存入依赖module数组
                    buildConfigField("String[]", "MODULE_DEPENDENCIES", getDepsModuleStr(moduleDeps[project.name]))
                    buildConfigField("String", "MODULE_NAME", "\"${project.name}\"")
                }
            }
        }

        dependencies {
            kaptDeps.each { v ->
                kapt v
            }

            if (runnableModules.contains(project.name.toString())) {
                //需要依赖的module
                moduleDeps[project.name].each { v ->
                    if (runModule != v) {
                        //当前运行的module无法依赖
//                        runtimeOnly project(":$v")
                        implementation project(":$v")
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task testx() {
    doFirst(new Action<Task>() {
        @Override
        void execute(Task task) {
            println "======================="
            println "testx"
            println "======================="
        }
    })
}